require_relative 'search_query_builder'

class PrintingSearchQueryBuilder < SearchQueryBuilder

  # TODO(plural): figure out how to do name matches that are LIKEs over elements of an array.
  # format should implicitly use the currently active card pool and restriction lists unless another is specified.
  @fields = [
    FieldData.new(:array, 'unified_printings.card_cycle_ids', ['card_cycle'],
      '`card_cycle_id` for a printing.'),
    FieldData.new(:array, 'unified_printings.card_pool_ids', ['card_pool'],
      '`card_pool_id`s for a card pool containing the card for a printing.'),
    FieldData.new(:array, 'unified_printings.card_set_ids', ['card_set'],
      '`card_set_id` for a printing.'),
    FieldData.new(:array, 'unified_printings.lower_card_subtype_names', ['card_subtype'],
      'text names for card subtypes, matched as lowercase.'),
    FieldData.new(:array, 'unified_printings.card_subtype_ids', ['card_subtype_id'],
      '`card_subtype_id`s for the card for a printing.'),
    FieldData.new(:array, 'unified_printings.restrictions_points', ['eternal_points'],
      'Concatenation of `restriction_id` and an Eternal Points value, joined by a hyphen, like `eternal_points:eternal_points_list_22_09-2`.'),
    FieldData.new(:array, 'unified_printings.format_ids', ['format'],
      '`format_id` for any format containing the card for a printing at any time.'),
    FieldData.new(:array, 'unified_printings.restrictions_global_penalty', ['has_global_penalty'],
      '`restriction_id` restricting the card for a printing with a global penalty, like `has_global_penalty:napd_mwl_1_1`.'),
    FieldData.new(:array, 'unified_printings.illustrator_ids', ['illustrator_id'],
      '`illustrator_id` for an illustrator for the printing.'),
    FieldData.new(:array, 'unified_printings.restrictions_banned', ['is_banned'],
      '`restriction_id` specifying the card for a printing as banned, like `is_banned:standard_ban_list_22_08`.'),
    FieldData.new(:array, 'unified_printings.restrictions_restricted', ['is_restricted'],
      '`restriction_id` specifying the card for a printing as banned, like `is_restricted:standard_mwl_3_4_b`.'),
    FieldData.new(:array, 'unified_printings.restriction_ids', ['restriction_id'],
      '`restriction_id` specifying the card for a printing for any reason, like: `restriction_id:eternal_points_list_22_09`'),
    FieldData.new(:array, 'unified_printings.snapshot_ids', ['snapshot'],
      '`snapshot_id` of a snapshot containing the card for a printing.'),
    FieldData.new(:array, 'unified_printings.restrictions_universal_faction_cost', ['universal_faction_cost'],
      'Concatenation of `restriction_id` and a Universal Faction Cost value, joined by a hyphen, like `universal_faction_cost:napd_mwl_1_2-3`.'),
    FieldData.new(:boolean, 'unified_printings.additional_cost', ['additional_cost'],
      'Does the card text for a printing specify an additional cost to play?'),
    FieldData.new(:boolean, 'unified_printings.advanceable', ['advanceable'],
      'Is the card for a printing advanceable?'),
    FieldData.new(:boolean, 'unified_printings.gains_subroutines', ['gains_subroutines'],
      'Does the card for a printing text allow for adding or gaining subroutines?'),
    FieldData.new(:boolean, 'unified_printings.in_restriction', ['in_restriction'],
      'Is the card for a printing specified on any Restriction list?'),
    FieldData.new(:boolean, 'unified_printings.interrupt', ['interrupt'],
      'Does the card for a printing have an interrupt ability?'),
    FieldData.new(:boolean, 'unified_printings.is_unique', ['is_unique', 'u'],
      'Is the card for a printing unique?'),
    FieldData.new(:boolean, 'unified_printings.on_encounter_effect', ['on_encounter_effect'],
      'Does the card text for a printing specify an on encounter effect?'),
    FieldData.new(:boolean, 'unified_printings.performs_trace', ['performs_trace'],
      'Does the card for a printing perform a trace?'),
    FieldData.new(:boolean, 'unified_printings.trash_ability', ['trash_ability'],
      'Does the card for a printing provide a trash ability?'),
    FieldData.new(:date, 'unified_printings.date_release', ['release_date', 'date_release', 'r'],
      'The release date for the set for a printing.'),
    FieldData.new(:integer, 'unified_printings.advancement_requirement', ['advancement_cost', 'g'],
      'The `advancement_cost` value for an agenda. Accepts positive integers and X (case-insensitive).'),
    FieldData.new(:integer, 'unified_printings.agenda_points', ['agenda_points', 'v'],
      'The printed number of agenda points for the agenda.'),
    FieldData.new(:integer, 'unified_printings.base_link', ['base_link', 'l'],
      'The printed link value for an Identity.'),
    FieldData.new(:integer, 'unified_printings.cost', ['cost', 'o'],
      'The printed cost of the card for a printing.'),
    FieldData.new(:integer, 'unified_printings.influence_cost', ['influence_cost', 'n'],
      'The influence cost or number of influence pips for the card for a printing.'),
    FieldData.new(:integer, 'unified_printings.link_provided', ['link_provided'],
      'The amount of link provided.'),
    FieldData.new(:integer, 'unified_printings.memory_cost', ['memory_usage', 'm'],
      'The memory (MU) cost of this card.'),
    FieldData.new(:integer, 'unified_printings.mu_provided', ['mu_provided'],
      'The amount of memory (MU) provided by the card for a printing.'),
    FieldData.new(:integer, 'unified_printings.num_printed_subroutines', ['num_printed_subroutines'],
      'The number of printed subroutines on this card.'),
    FieldData.new(:integer, 'unified_printings.num_printings', ['num_printings'],
      'Count of unique printings for this card.'),
    FieldData.new(:integer, 'unified_printings.quantity', ['quantity', 'y'],
      'The number of copies of a printing in the set.'),
    FieldData.new(:integer, 'unified_printings.recurring_credits_provided', ['recurring_credits_provided'],
      'The number of recurring credits provided by this card.  Accepts integers or X.'),
    FieldData.new(:integer, 'unified_printings.strength', ['strength', 'p'],
      'The strength of the card for a printing.'),
    FieldData.new(:integer, 'unified_printings.trash_cost', ['trash_cost', 'h'],
      'The trash cost of this card.'),
    FieldData.new(:string, 'unified_printings.attribution', ['attribution'],
      'The designer of this card text, if specified.'),
    FieldData.new(:string, 'unified_printings.card_type_id', ['card_type', 't'],
      '`card_type_id` of this card.'),
    FieldData.new(:string, 'unified_printings.faction_id', ['faction', 'f'],
      '`faction_id` of this card.'),
    FieldData.new(:string, 'unified_printings.flavor', ['flavor', 'flavour', 'a'],
      'The flavor text for a printing.'),
    FieldData.new(:string, 'unified_printings.display_illustrators', ['illustrator', 'i'],
      'The printed version of the illustrator credits, with multiple illustrators separated by commas.'),
    FieldData.new(:string, 'unified_printings.side_id', ['side', 'd'],
      '`side_id` of the card for a printing.'),
    FieldData.new(:string, 'unified_printings.stripped_text', ['text', 'x'],
      'The text of a card for a printing, stripped of all formatting symbols and marks.'),
    FieldData.new(:string, 'unified_printings.stripped_title', ['title', '_'],
      'The title of a card for a printing, stripped of all formatting symbols and marks.')
  ]

end
