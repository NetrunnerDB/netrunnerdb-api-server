require_relative 'search_query_builder'

class CardSearchQueryBuilder < SearchQueryBuilder

  # TODO(plural): figure out how to do name matches that are LIKEs over elements of an array.
  # format should implicitly use the currently active card pool and restriction lists unless another is specified.
  @fields = [
    FieldData.new(:array, 'unified_cards.card_cycle_ids', ['card_cycle'],
      '`card_cycle_id`s for all card cycles containing printings of this card.'),
    FieldData.new(:array, 'unified_cards.card_pool_ids', ['card_pool'],
      '`card_pool_id`s for all card pools containing this card.'),
    FieldData.new(:array, 'unified_cards.card_set_ids', ['card_set'],
      '`card_set_id`s for all card cycles containing printings of this card.'),
    FieldData.new(:array, 'unified_cards.lower_card_subtype_names', ['card_subtype'],
      'text names for card subtypes, matched as lowercase.'),
    FieldData.new(:array, 'unified_cards.card_subtype_ids', ['card_subtype_id'],
      '`card_subtype_id`s for this card.'),
    FieldData.new(:array, 'unified_cards.restrictions_points', ['eternal_points'],
      'Concatenation of `restriction_id` and an Eternal Points value, joined by a hyphen, like `eternal_points:eternal_points_list_22_09-2`.'),
    FieldData.new(:array, 'unified_cards.format_ids', ['format'],
      '`format_id` for any format containing this card at any time.'),
    FieldData.new(:array, 'unified_cards.restrictions_global_penalty', ['has_global_penalty'],
      '`restriction_id` restricting this card with a global penalty, like `has_global_penalty:napd_mwl_1_1`.'),
    FieldData.new(:array, 'unified_cards.restrictions_banned', ['is_banned'],
      '`restriction_id` specifying this card as banned, like `is_banned:standard_ban_list_22_08`.'),
    FieldData.new(:array, 'unified_cards.restrictions_restricted', ['is_restricted'],
      '`restriction_id` specifying this card as banned, like `is_restricted:standard_mwl_3_4_b`.'),
    FieldData.new(:array, 'unified_cards.printing_ids', ['printing_id'],
      '`printing_id` for any printing of this card.'),
    FieldData.new(:array, 'unified_cards.restriction_ids', ['restriction_id'],
      '`restriction_id` specifying this card for any reason, like: `restriction_id:eternal_points_list_22_09`'),
    FieldData.new(:array, 'unified_cards.snapshot_ids', ['snapshot'],
      '`snapshot_id` of a snapshot containing this card.'),
    FieldData.new(:array, 'unified_cards.restrictions_universal_faction_cost', ['universal_faction_cost'],
      'Concatenation of `restriction_id` and a Universal Faction Cost value, joined by a hyphen, like `universal_faction_cost:napd_mwl_1_2-3`.'),
    FieldData.new(:boolean, 'unified_cards.additional_cost', ['additional_cost'], 'Does the card text specify an additional cost to play?'),
    FieldData.new(:boolean, 'unified_cards.advanceable', ['advanceable'], 'Is the card advanceable?'),
    FieldData.new(:boolean, 'unified_cards.gains_subroutines', ['gains_subroutines'], 'Does the card text allow for adding or gaining subroutines?'),
    FieldData.new(:boolean, 'unified_cards.in_restriction', ['in_restriction'], 'Is the card specified on any Restriction list?'),
    FieldData.new(:boolean, 'unified_cards.interrupt', ['interrupt'], 'Does the card have an interrupt ability?'),
    FieldData.new(:boolean, 'unified_cards.is_unique', ['is_unique'], 'Is the card unique?'),
    FieldData.new(:boolean, 'unified_cards.on_encounter_effect', ['on_encounter_effect'], 'Does the card text specify an on encounter effect?'),
    FieldData.new(:boolean, 'unified_cards.performs_trace', ['performs_trace'], 'Does the card perform a trace?'),
    FieldData.new(:boolean, 'unified_cards.trash_ability', ['trash_ability'], 'Does the card provide a trash ability?'),
    FieldData.new(:integer, 'unified_cards.advancement_requirement', ['advancement_cost', 'g'], 'The `advancement_cost` value for an agenda. Accepts positive integers and X (case-insensitive).'),
    FieldData.new(:integer, 'unified_cards.agenda_points', ['agenda_points', 'v'], 'The printed number of agenda points for the agenda.'),
    FieldData.new(:integer, 'unified_cards.base_link', ['base_link', 'l'], 'The printed link value for an Identity.'),
    FieldData.new(:integer, 'unified_cards.cost', ['cost', 'o'], 'The printed cost of the card.'),
    FieldData.new(:integer, 'unified_cards.influence_cost', ['influence_cost', 'n'], 'The influence cost or number of influence pips for the card.'),
    FieldData.new(:integer, 'unified_cards.link_provided', ['link_provided'], 'The amount of link provided.'),
    FieldData.new(:integer, 'unified_cards.memory_cost', ['memory_usage', 'm'], 'The memory (MU) cost of this card.'),
    FieldData.new(:integer, 'unified_cards.mu_provided', ['mu_provided'], 'The amount of memory (MU) provided by this card.'),
    FieldData.new(:integer, 'unified_cards.num_printed_subroutines', ['num_printed_subroutines'], 'The number of printed subroutines on this card.'),
    FieldData.new(:integer, 'unified_cards.num_printings', ['num_printings'], 'Count of unique printings for this card.'),
    FieldData.new(:integer, 'unified_cards.recurring_credits_provided', ['recurring_credits_provided'],
      'The number of recurring credits provided by this card.  Accepts integers or X.'),
    FieldData.new(:integer, 'unified_cards.strength', ['strength', 'p'], 'The strength of this card.'),
    FieldData.new(:integer, 'unified_cards.trash_cost', ['trash_cost', 'h'], 'The trash cost of this card.'),
    FieldData.new(:string, 'unified_cards.attribution', ['attribution'], 'The designer of this card text, if specified.'),
    FieldData.new(:string, 'unified_cards.card_type_id', ['card_type', 't'], '`card_type_id` of this card.'),
    FieldData.new(:string, 'unified_cards.faction_id', ['faction', 'f'], '`faction_id` of this card.'),
    FieldData.new(:string, 'unified_cards.side_id', ['side', 'd'], '`side_id` of this card.'),
    FieldData.new(:string, 'unified_cards.stripped_text', ['text', 'x'], 'The text of the card, stripped of all formatting symbols and marks.'),
    FieldData.new(:string, 'unified_cards.stripped_title', ['title', '_'], 'The title of the card, stripped of all formatting symbols and marks.')
  ]

end
